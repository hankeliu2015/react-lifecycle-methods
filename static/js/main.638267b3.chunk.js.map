{"version":3,"sources":["logo.svg","lifecyclechart.jpeg","name.js","lang.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Name","state","name","age","react_default","a","createElement","this","props","concat","firstName","Component","Language","language","changeLang","e","preventDefault","_this","setState","resetPage","window","location","reload","_this2","setTimeout","onClick","id","className","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","src","logo","alt","src_name","lang","chart","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,kDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,kRCsBzBC,6MAnBbC,MAAO,CACLC,KAAM,GACNC,IAAK,2EAQL,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,qCAAH,4DACAF,EAAAC,EAAAC,cAAA,SAAIC,KAAKN,MAAMC,KAAf,OAAyBK,KAAKN,MAAME,IAApC,qEAR0BK,GAC/B,MAAO,CAACN,KAAI,GAAAO,OAAKD,EAAME,UAAX,aAAiCP,IAAK,WAPlCQ,aC0EJC,6MAzEbX,MAAQ,CAAEY,SAAU,WA4BpBC,WAAa,SAACC,GACZA,EAAEC,iBAC0B,QAAxBC,EAAKhB,MAAMY,SACbI,EAAKC,SAAS,CAACL,SAAU,YACQ,YAAxBI,EAAKhB,MAAMY,UACpBI,EAAKC,SAAS,CAACL,SAAU,qCAI7BM,UAAY,SAACJ,GACXA,EAAEC,iBACFI,OAAOC,SAASC,6FA5BC,IAAAC,EAAAhB,KACjBiB,WAAW,WACTD,EAAKL,SAAS,CAACL,SAAU,SACxB,sCA8BH,OACET,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,WAAMF,EAAAC,EAAAC,cAAA,WACNF,EAAAC,EAAAC,cAAA,8FAGAF,EAAAC,EAAAC,cAAA,gBACKF,EAAAC,EAAAC,cAAA,8BADL,6FACuHF,EAAAC,EAAAC,cAAA,YAAOC,KAAKN,MAAMY,WAGzIT,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQmB,QAASlB,KAAKO,YAAtB,4BACAV,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQoB,GAAG,SAASC,UAAU,SAASF,QAASlB,KAAKY,WAArD,cACAf,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,kCADF,sGAGAF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,iCADF,2GACqIF,EAAAC,EAAAC,cAAA,8BADrI,KAGAF,EAAAC,EAAAC,cAAA,uIAjEeK,aCyCRiB,cAnCb,SAAAA,IAAc,IAAAX,EAAA,OAAAY,OAAAC,EAAA,EAAAD,CAAAtB,KAAAqB,IACZX,EAAAY,OAAAE,EAAA,EAAAF,CAAAtB,KAAAsB,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAA1B,QACKN,MAAQ,CACXC,KAAM,QAHIe,wEAYZ,OACEb,EAAAC,EAAAC,cAAA,OAAKqB,UAAU,OACbvB,EAAAC,EAAAC,cAAA,UAAQqB,UAAU,cAChBvB,EAAAC,EAAAC,cAAA,OAAK4B,IAAKC,IAAMR,UAAU,WAAWS,IAAI,SAEzChC,EAAAC,EAAAC,cAAA,kCACAF,EAAAC,EAAAC,cAAA,sGAMFF,EAAAC,EAAAC,cAAC+B,EAAD,CAAM3B,UAAWH,KAAKN,MAAMC,OAC5BE,EAAAC,EAAAC,cAACgC,EAAD,MAEAlC,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,OAAKoB,GAAG,SAASQ,IAAKK,IAAOH,IAAI,4BA9BvBzB,aCKE6B,QACW,cAA7BpB,OAAOC,SAASoB,UAEe,UAA7BrB,OAAOC,SAASoB,UAEhBrB,OAAOC,SAASoB,SAASC,MACvB,2DCZNC,IAASC,OAAOxC,EAAAC,EAAAC,cAACuC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.638267b3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/lifecyclechart.5fb9e959.jpeg\";","import React, { Component } from 'react';\n\nclass Name extends Component {\n  state ={\n    name: '',\n    age: 0\n  }   //set default state to avoid console warning message\n\n  static getDerivedStateFromProps(props){\n   return {name: `${props.firstName} Davidson`, age: 45 }\n  }     //reture object to updata new state , state.name and state.age\n\n  render() {\n    return (\n      <div>\n        <p><b>getDerivedStateFromProps</b> return new object before render() to update the state: </p>\n        <p>{this.state.name} is {this.state.age} years old!!!</p>\n      </div>\n    );\n  }\n}\n\nexport default Name;\n","import React, { Component } from 'react';\n\nclass Language extends Component {\n  state = { language: 'React'}\n\n  // shouldComponentUpdate(nextProps, nextState) {\n\n  //   if (this.state.language === nextState.language) {\n  //     return false\n  //   } else {\n  //     return true\n  //   }\n  // }\n\n  componentDidMount(){    //this is 2nds timer to change the language without click on change button.\n    setTimeout(()=>{\n      this.setState({language: 'Vue'})\n    }, 2000)\n  }\n\n  // componentDidMount(){\n  //   this.inteval = setInterval(()=>{\n  //        // alert('hello\"; 9000')\n  //        // console.log(this.interval)\n  //   }) //call 3rd party to fectch data\n  // }\n\n  // componentWillUnmount() {      //unmount\n  //   clearInterval(this.inteval)\n  // }\n\n  changeLang = (e) => {\n    e.preventDefault();\n    if (this.state.language === 'Vue') {\n      this.setState({language: 'Angular'})\n    } else if (this.state.language === 'Angular') {\n      this.setState({language: 'No more options, please reset'})\n    }\n  }\n\n  resetPage = (e) => {\n    e.preventDefault();\n    window.location.reload();\n  }\n\n  render() {\n    // console.log(\"rendering component\")\n    return (\n      <div>\n        <br /><hr/>\n        <li>\n          Four stage of Component LifeCycle: Pre-mounting, Mouting, Updateing, Unmounting.\n        </li>\n        <li>\n          In <b>componentDidMount</b> method invoked after render(), use a setTimeout method to change language automatically: <mark>{this.state.language}</mark>\n        </li>\n\n        <br/>\n        <button onClick={this.changeLang}>Change Language manually</button>\n        <br/>\n        <button id='chart1' className='chart1' onClick={this.resetPage}>Reset page</button>\n        <li>\n          <b>shouldComponentUpdate</b> will return a boolean. We can put a condition compare this.state.language and nextState.lanugage.\n        </li>\n        <li>\n          <b>componentWillUnmount</b>, which is called just before the component gets deleted. This is used to clear out any stuff set up in <b>componentDidMount</b>.\n        </li>\n        <li>\n          Deprecated methods:\n          componentWillReceiveProps, componentWillMount, componentWillReceiveProps, componentWillUpdate\n        </li>\n      </div>\n    );\n  }\n}\n\nexport default Language;\n","import React, { Component } from 'react';\nimport './App.css';\nimport logo from './logo.svg';\nimport chart from './lifecyclechart.jpeg';\nimport Name from './name';\nimport Lang from './lang'\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      name: 'Joey'\n    }\n  }\n\n  // this.state = {\n  //   name: 'Hank'\n  // }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n\n          <p>Learn React LifeCycle</p>\n          <p>\n            getDerivedStateFromProps, componentDidMount, shouldComponentUpdate, componentWillUnmount\n          </p>\n        </header>\n\n\n        <Name firstName={this.state.name} />\n        <Lang />\n\n        <br/>\n\n        <img id='chart1' src={chart} alt=\"LifeCycle Chart\" />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}